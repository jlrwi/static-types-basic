/*jslint
    fudge
*/

// log should be fst because pair map operates on snd

import pair_type from "./Pair_Type.min.js";

import {
    pipe
} from "@jlrwi/combinators";

const type_factory = function (type_name) {
    return function (log_type) {
        return function (value_type) {
            const pairT = pair_type(log_type)(value_type);

// (b->(c,s)) -> (a->(b,s)) -> a -> (c,s)
            const compose = function (f) {
                return function (g) {
                    return function (x) {
                        const gx = g(x);
                        const fx = f(pairT.snd(gx));

                        return pairT.create(
                            log_type.concat(
                                pairT.fst(gx)
                            )(
                                pairT.fst(fx)
                            )
                        )(
                            pairT.snd(fx)
                        );
                    };
                };
            };

            //  id :: a -> (a, s)
            const id = pairT.create(log_type.empty());

            // Embellish a unary fx with a constant
            const embellish_function = function (f) {
                return function (fst) {
                    return pipe(
                        f
                    )(
                        pairT.create(log_type.of(fst))
                    );
                };
            };

// Needed for adt tests
            const equals = pairT.equals;

            return Object.freeze({
                spec: "curried-static-land",
                version: 1,
                typeName: type_name + "< " + value_type.type_name + ">",
                equals,
                compose,
                id,
                embellish_function,
                create: pairT.create,
                valiate: pairT.validate
            });
        };
    };
};

export default Object.freeze(type_factory);
