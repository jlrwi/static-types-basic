/*jslint
    unordered
*/

import {
    constant
} from "@jlrwi/combinators";
import {
    is_object,
    type_check,
    minimal_object
} from "@jlrwi/esfunctions";

const type_name = "Any Number";

const create = function (r = 0, i = 0) {
    return minimal_object({
        type_name,
        toJSON: constant(
            type_name + " (" +
            JSON.stringify(r) +
            " + " +
            JSON.stringify(i) + "i" +
            ")"
        ),
        r,
        i
    });
};

// Setoid :: a -> a -> boolean
const adt_equals = function (x) {
    return function (y) {
        return ((x.r === y.r) && (x.i === y.i));
    };
};

// Ord :: a -> a -> boolean
const lte = function (y) {
    return function (x) {
        return ((x.r**2 + x.i**2) <= (y.r**2 + y.i**2));
    };
};

// Semigroup :: {a} -> {a} -> {a}
const concat = function (y) {
    return function (x) {
        return create(y.r + x.r, y.i + x.i);
    };
};

// Monoid :: () -> {r: 0, i: 0}
const empty = function () {
    return create(0, 0);
};

// Group :: a -> a
const invert = function (x) {
    return create(-x.r, -x.i);
};

// Functor :: (a -> b) -> a -> b
const map = function (f) {
    return function (x) {
        return create(f(x.r), f(x.i));
    };
};

// Bifunctor :: (a->b) -> (c->d) -> <a, c> -> <b, d>
const bimap = function (f) {
    return function (g) {
        return function (x) {
            return create(f(x.r), g(x.i));
        };
    };
};

const validate = function (x) {
    return (
        is_object(x) && type_check("number")(x.r) && type_check("number")(x.i)
    );
};

const complex_multiply = function (y) {
    return function (x) {
        return create((x.r * y.r) - (x.i * y.i))((x.r * y.i) + (x.i * y.r));
    };
};

const type_factory = function () {
    return Object.freeze({
        spec: "curried-static-land",
        version: 1,
        type_name,
        concat,
        empty,
        invert,
        equals: adt_equals,
        lte,
        map,
        bimap,
        multiply: complex_multiply,
        create,
        validate
    });
};

export default Object.freeze(type_factory);
