/*jslint
    unordered
*/

import {
    constant,
    apply_with,
    second,
    compose
} from "@jlrwi/combinators";
import {
    equals,
    empty_object,
    is_object
} from "@jlrwi/esfunctions";

// Static Land implementation of Nil

const type_name = "Nil";

// Custom methods

const object_is_nil = function (o) {
    return (
        is_object(o) &&
        Object.isFrozen(o) &&
        (Object.keys(o).length === 0) &&
        (o.constructor === undefined)
    );
};

const create = compose(Object.freeze)(empty_object);

// Setoid :: a -> a -> Boolean
const type_equals = compose(constant)(constant(true));

// Ord :: a -> a -> Boolean
const lte = compose(constant)(constant(true));

const concat = constant;

const empty = create;

// Functor :: (a -> b) -> a -> b
const map = second;

const validate = function (x) {
    const testers = [
        equals(undefined),
        equals(null),
        Number.isNaN,
        object_is_nil
    ];

    return testers.some(apply_with(x));
};

const type_factory = function () {
    return Object.freeze({
        spec: "curried-static-land",
        version: 1,
        type_name,
        equals: type_equals,
        lte,
        concat,
        empty,
        map,
        create,
        validate
    });
};

export default Object.freeze(type_factory);
